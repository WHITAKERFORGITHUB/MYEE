package com.my.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.my.exception.AddException;
import com.my.exception.FindException;
import com.my.exception.ModifyException;
import com.my.exception.RemoveException;
import com.my.sql.MyConnection;
import com.my.vo.Customer;

import jdk.internal.org.jline.terminal.TerminalBuilder.SystemOutput;


public class CustomerDAOOracle implements CustomerDAO {

	@Override
	public void insert(Customer c) throws AddException {
		Connection con = null;
		try {
			con = MyConnection.getConnection();
		} catch (Exception e) {
			e.printStackTrace();
			throw new AddException("고객 추가 실패: 이유=" + e.getMessage());
		}
		PreparedStatement pstmt = null;
		String insertSQL = "INSERT INTO customer(id, pwd, name, zipcode, addr) VALUES (?,?,?,?,?)";
		try {
			pstmt = con.prepareStatement(insertSQL);
			pstmt.setString(1, c.getId());
			pstmt.setString(2, c.getPwd());
			pstmt.setString(3, c.getName());
			pstmt.setString(4, "12345");
			pstmt.setString(5, "명동");
			pstmt.executeUpdate(); // insert구문이 처리 될 수 있도록
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			MyConnection.close(con, pstmt);
		}
		
	}

	@Override
	public List<Customer> selectAll() throws FindException {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			con = MyConnection.getConnection();
		} catch (Exception e) {
			e.printStackTrace();
			throw new FindException(e.getMessage());
		}
		String selectSQL = "SELECT * FROM customer ORDER BY id";
		try {
			pstmt = con.prepareStatement(selectSQL);
			rs = pstmt.executeQuery();
			List<Customer> list = new ArrayList<Customer>();
			while(rs.next()) {
				String id = rs.getString("id");
				String pwd = rs.getString("pwd");
				String name = rs.getString("name");
				String zipcode = rs.getString("zipcode");
				String addr = rs.getString("addr");
				Customer c = new Customer(id, pwd, name, zipcode, addr);
				list.add(c);
			}
			if(list.size() == 0) {
				throw new FindException("고객이 한명도 없습니다.");
			}
			return list;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new FindException(e.getMessage());
		} finally {
			MyConnection.close(con, pstmt, rs);
		}
	}

	@Override
	public Customer selectById(String id) throws FindException {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			con = MyConnection.getConnection();
		} catch (Exception e) {
			e.printStackTrace();
			throw new FindException(e.getMessage());
		}
		String selectByIdSQL = "SELECT * FROM customer where id=?";
		try {
			pstmt = con.prepareStatement(selectByIdSQL);
			pstmt.setString(1, id);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				String pwd = rs.getString("pwd");
				String name = rs.getString("name");
				String zipcode = rs.getString("zipcode");
				String addr = rs.getString("addr");
				return new Customer(id, pwd, name, zipcode, addr);
			} else {
				throw new FindException("아이디에 해당하는 고객이 없습니다.");
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw new FindException(e.getMessage());
		} finally {
			MyConnection.close(con, pstmt, rs);
		}
	}

	@Override
	public Customer update(Customer c) throws ModifyException {
		Connection con = null;
		PreparedStatement pstmt = null;
		Statement stmt = null;
		try {
			con = MyConnection.getConnection();
		} catch (Exception e) {
			e.printStackTrace();
			throw new ModifyException(e.getMessage());
		}
		String updateSQL = "UPDATE customer SET pwd=?, name=? WHERE id=?"; // 비밀번호와 이름을 변경
		try {
			pstmt = con.prepareStatement(updateSQL);
			pstmt.setString(1, c.getPwd());
			pstmt.setString(2, c.getName());
			pstmt.setString(3, c.getId());
			pstmt.executeUpdate();
		} catch (SQLException e) {
			throw new ModifyException(e.getMessage());
		} finally {
			MyConnection.close(con, pstmt);
		}
	}

	@Override
	public Customer delete(String id) throws RemoveException {
		Customer c;
		try {
			c = selectById(id);
		} catch (FindException e) {
			//e.printStackTrace();
			throw new RemoveException(e.getMessage());
		}
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = MyConnection.getConnection();
		} catch (Exception e) {
			e.printStackTrace();
			throw new RemoveException(e.getMessage());
		}
		String deleteSQL = "DELETE FROM customer WHERE id=?";
		try {
			pstmt = con.prepareStatement(deleteSQL);
			pstmt.setString(1, id);
			int rowcnt = pstmt.executeUpdate();
			if(rowcnt != 1) { // 삭제건수가 0건
				throw new RemoveException("아이디에 해당 고객이 없습니다.");
			}
			return c;
		} catch (SQLException e) {
			throw new RemoveException(e.getMessage());
			
		} finally {
			MyConnection.close(con, pstmt);
		}
		
		
		
	}
	
	// 테스트를 위해 메인메소드 만들기
	public static void main(String[] args) {
		CustomerDAOOracle dao = new CustomerDAOOracle();
		
		// 고객 삭제 테스트
		String id = "id5";
		try {
			Customer c = dao.delete(id);
			System.out.println("삭제테스트성공: " + c);
		} catch (RemoveException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// 아이디로 고객 검색
//		try {
//			Customer c = dao.selectById("sangwoo");
//			System.out.println(c);
//		} catch (FindException e) {
//			e.printStackTrace();
//		}

		// 고객전체검색 테스트
//		try {
//			List<Customer> list = dao.selectAll();
//			for(Customer c: list) {
//				System.out.println(c);
//			}
//		} catch (FindException e) {
//			e.printStackTrace();
//		}
		
		// 고객추가 테스트
//		Customer c = new Customer();
//		c.setId("PETER");
//		c.setPwd("1234");
//		c.setName("pury");
//		
//		try {
//			dao.insert(c);
//			System.out.println("추가 테스트 성공");
//		} catch (AddException e) {
//			System.out.println(e.getMessage());
//		}
	}

}
